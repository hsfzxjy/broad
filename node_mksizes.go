//go:build ignore

package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"
	"math"
	"os"
)

func main() {
	var b bytes.Buffer
	b.WriteString("// Code generated by node_mksizes.go. DO NOT EDIT.\n")
	b.WriteString("//go:generate go run node_mksizes.go\n")
	b.WriteString("\n")
	b.WriteString("package broad\n")
	fmt.Fprintf(&b, "const _NSizes = %d\n", 64)
	sizes := []int{64, 80, 96, 112, 128}
	fmt.Fprintf(&b, "var sizes = [_NSizes+1]struct{ Cap, NBytes byte }{\n")
	fmt.Fprintf(&b, "{},\n")
	for i := 1; i <= 64; i++ {
		minWasted := math.MaxInt
		size := 0
		for _, s := range sizes {
			if i > s {
				continue
			}
			wasted := s % i
			if wasted <= minWasted {
				minWasted = wasted
				size = s
			} else if wasted*16 <= s {
				size = s
			}
		}
		cap := size / i
		nbytes := size
		fmt.Fprintf(&b, "{%[1]d, %[2]d}, // %[3]d * %[1]d = %[4]d, waste = %[5]d\n", cap, nbytes, i, i*cap, size-i*cap)
	}
	fmt.Fprintf(&b, "}\n")
	println(string(b.Bytes()))
	out, err := format.Source(b.Bytes())
	if err != nil {
		log.Fatal(err)
	}
	err = os.WriteFile("node_sizes.go", out, 0644)
	if err != nil {
		log.Fatal(err)
	}
}
